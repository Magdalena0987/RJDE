"use strict";function _createForOfIteratorHelper(e,t){var r;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw i}}}}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}!function(){var t=document.getElementById("site-navigation");if(t){var r=t.getElementsByTagName("button")[0];if(void 0!==r){var e=t.getElementsByTagName("ul")[0];if(void 0!==e){e.classList.contains("nav-menu")||e.classList.add("nav-menu"),r.addEventListener("click",function(){t.classList.toggle("toggled"),"true"===r.getAttribute("aria-expanded")?r.setAttribute("aria-expanded","false"):r.setAttribute("aria-expanded","true")}),document.addEventListener("click",function(e){t.contains(e.target)||(t.classList.remove("toggled"),r.setAttribute("aria-expanded","false"))});var n,a=e.getElementsByTagName("a"),i=e.querySelectorAll(".menu-item-has-children > a, .page_item_has_children > a"),o=_createForOfIteratorHelper(a);try{for(o.s();!(n=o.n()).done;){var s=n.value;s.addEventListener("focus",u,!0),s.addEventListener("blur",u,!0)}}catch(e){o.e(e)}finally{o.f()}var c,l=_createForOfIteratorHelper(i);try{for(l.s();!(c=l.n()).done;){c.value.addEventListener("touchstart",u,!1)}}catch(e){l.e(e)}finally{l.f()}}else r.style.display="none"}}function u(){if("focus"===event.type||"blur"===event.type)for(var e=this;!e.classList.contains("nav-menu");)"li"===e.tagName.toLowerCase()&&e.classList.toggle("focus"),e=e.parentNode;if("touchstart"===event.type){var t=this.parentNode;event.preventDefault();var r,n=_createForOfIteratorHelper(t.parentNode.children);try{for(n.s();!(r=n.n()).done;){var a=r.value;t!==a&&a.classList.remove("focus")}}catch(e){n.e(e)}finally{n.f()}t.classList.toggle("focus")}}}();var intersectionOptions={root:null,rootMargin:"10px",threshold:.4},observerFade=new IntersectionObserver(intersectionCallFade,intersectionOptions),fade=document.querySelectorAll(".js-animate-fade");function intersectionCallFade(e,t){e.forEach(function(e){.4<=e.intersectionRatio&&e.target.classList.add("js-animate-fade-init")})}fade.forEach(function(e){observerFade.observe(e)});var observerUp=new IntersectionObserver(intersectionCallUp,intersectionOptions),up=document.querySelectorAll(".js-animate-up");function intersectionCallUp(e,t){e.forEach(function(e){.4<=e.intersectionRatio&&e.target.classList.add("js-animate-up-init")})}up.forEach(function(e){observerUp.observe(e)});var observerRight=new IntersectionObserver(intersectionCallRight,intersectionOptions),right=document.querySelectorAll(".js-animate-right");function intersectionCallRight(e,t){e.forEach(function(e){.4<=e.intersectionRatio&&e.target.classList.add("js-animate-right-init")})}right.forEach(function(e){observerRight.observe(e)});var observerLeft=new IntersectionObserver(intersectionCallLeft,intersectionOptions),left=document.querySelectorAll(".js-animate-left");function intersectionCallLeft(e,t){e.forEach(function(e){.4<=e.intersectionRatio&&e.target.classList.add("js-animate-left-init")})}left.forEach(function(e){observerLeft.observe(e)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
